/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
	// Return false to exempt requests from being fulfilled by index.html.
	({ request, url }) => {
		// If this isn't a navigation, skip.
		if (request.mode !== "navigate") {
			return false;
		} // If this is a URL that starts with /_, skip.

		if (url.pathname.startsWith("/_")) {
			return false;
		} // If this looks like a URL for a resource, because it contains // a file extension, skip.

		if (url.pathname.match(fileExtensionRegexp)) {
			return false;
		} // Return true to signal that we want to use the handler.

		return true;
	},
	createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
	// Add in any other file extensions or routing criteria as needed.
	({ url }) =>
		url.origin === self.location.origin && url.pathname.endsWith(".png"), // Customize this strategy as needed, e.g., by changing to CacheFirst.
	new StaleWhileRevalidate({
		cacheName: "images",
		plugins: [
			// Ensure that once this runtime cache reaches a maximum size the
			// least-recently used images are removed.
			new ExpirationPlugin({ maxEntries: 50 }),
		],
	})
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
	if (event.data && event.data.type === "SKIP_WAITING") {
		self.skipWaiting();
	}
});

// Add pushnotification support to the service worker. Ask for permission first.
self.addEventListener("push", (event) => {
  const data = event.data.json();
  console.log("Push received...");
  self.registration.showNotification(data.title, {
    body: data.body,
    icon: "https://fhict-qudos.web.app/static/media/QudosLogo.e0c5641ff735e73eb0a0.png",
  });
});

// on load, check if the user has granted permission for notifications
// if so, we need to update the server with the push subscription
// self.addEventListener("load", async () => {
//   const permission = await self.Notification.requestPermission();
//   if (permission === "granted") {
//     console.log("Notification permission granted.");
//     // get the subscription object
//     const subscription = await self.registration.pushManager.getSubscription();
//     // send the subscription object to the server
//     await fetch("/api/notifications/subscribe", {
//       method: "POST",
//       body: JSON.stringify(subscription),
//       headers: {
//         "content-type": "application/json",
//       },
//     });
//   }
// });

// ask to allow notifications
self.addEventListener('load', init);
function init() {
  if ('Notification' in window) {
    Notification.requestPermission(result =>  {
      if (result === 'granted') {
        console.log('Acess granted! :)')
      } else if (result === 'denied') {
        console.log('Access denied :(')
      } else {
        console.log('Request ignored :/')
      }
    })
  } 
}

self.addEventListener("notificationclick", event => {
	event.notification.close();
	if (event.action === 'explore') {
		// self.clients redirects to the page
		event.waitUntil(
			self.clients.matchAll().then(clis => {
				const client = clis.find(c => {
					return c.visibilityState === 'visible';
				});
				
				if (client !== undefined) {
					client.navigate('https://fhict-qudos.web.app');
				} else {
					self.clients.openWindow('https://fhict-qudos.web.app');
				}
				event.notification.close();
			})
		);
	} else if (event.action === 'close') {
		event.notification.close();
	} else {
		event.waitUntil(
			self.clients.matchAll().then(clis => {
				const client = clis.find(c => {
					return c.visibilityState === 'visible';
				});
				
				if (client !== undefined) {
					client.navigate('https://fhict-qudos.web.app');
					client.focus();
				} else {
					self.clients.openWindow('https://fhict-qudos.web.app');
				}
				event.notification.close();

			})
		);
	}
}, false);
